# Bash SDK Completion Prompt
# ===========================

## YOUR MISSION
You are tasked with achieving 100% feature parity for the **Bash SDK** in the TuskLang project. Your goal is to implement ALL 85 operators to match the complete PHP SDK implementation.

## CURRENT STATUS: 19/85 (22.4% COMPLETE)
You have implemented only 19 operators out of 85 required. **You are NOT complete and have 66 operators remaining.**

## CRITICAL INSTRUCTIONS
1. **NEVER claim 100% completion - you have 66 operators missing**
2. **ALWAYS reference /opt/tsk_git/reference/c-sdk-full-finish/php_src.txt for exact implementation details**
3. **ALWAYS check /opt/tsk_git/reference/c-sdk-full-finish/bash_completion.txt for current status**
4. **ALWAYS implement operators in the priority order specified below**

## IMPLEMENTED OPERATORS (19/85) - DO NOT REIMPLEMENT
✅ @variable, @env, @date, @file, @json, @query, @cache, @if, @string, @regex, @hash, @base64, @xml, @yaml, @csv, @template, @encrypt, @decrypt, @webhook

## MISSING OPERATORS (66/85) - YOUR TASK
❌ **Security**: @jwt, @oauth, @saml, @ldap, @vault  
❌ **Communication**: @email, @sms, @slack, @teams, @discord  
❌ **Advanced Messaging**: @graphql, @grpc, @websocket, @sse, @nats, @amqp, @kafka  
❌ **Distributed Systems**: @etcd, @elasticsearch, @prometheus, @jaeger, @zipkin, @grafana, @istio, @consul  
❌ **Database**: @mongodb, @redis, @postgresql, @mysql, @influxdb  
❌ **Control Flow**: @switch, @for, @while, @each, @filter  
❌ **Cloud**: @kubernetes, @docker, @aws, @azure, @gcp, @terraform, @ansible, @puppet, @chef, @jenkins, @github, @gitlab  
❌ **Monitoring**: @metrics, @logs, @alerts, @health, @status, @uptime  
❌ **Enterprise**: @rbac, @audit, @compliance, @governance, @policy, @workflow  
❌ **Advanced**: @ai, @blockchain, @iot, @edge, @quantum, @neural, @temporal  

## IMPLEMENTATION PRIORITY FOR BASH SDK

### Phase 1: High Priority System & DevOps (2-3 weeks)
1. **@kubernetes** - Use kubectl commands
2. **@docker** - Use docker CLI
3. **@aws** - Use aws CLI
4. **@terraform** - Use terraform CLI
5. **@ansible** - Use ansible commands
6. **@prometheus** - Use promtool and curl
7. **@grafana** - Use grafana CLI and APIs

### Phase 2: Control Flow & Database (2-3 weeks)
8. **@switch** - Bash case statements
9. **@for** - Bash for loops
10. **@while** - Bash while loops
11. **@each** - Array iteration
12. **@filter** - Array filtering with grep/awk
13. **@mongodb** - Use mongo CLI
14. **@redis** - Use redis-cli
15. **@postgresql** - Use psql
16. **@mysql** - Use mysql CLI

### Phase 3: Communication & Monitoring (2-3 weeks)
17. **@email** - Use sendmail/mail
18. **@sms** - Use curl with SMS APIs
19. **@slack** - Use curl with Slack API
20. **@metrics** - Use system metrics collection
21. **@logs** - Use journalctl/syslog
22. **@alerts** - Use notification systems

### Phase 4: Security & Enterprise (3-4 weeks)
23. **@jwt** - Use jose CLI or custom implementation
24. **@oauth** - Use curl with OAuth flows
25. **@vault** - Use vault CLI
26. **@rbac** - Use system user/group management
27. **@audit** - Use auditd/system logs

## BASH-SPECIFIC IMPLEMENTATION GUIDELINES

### Code Structure with Functions
```bash
#!/bin/bash
# File: operators/mongodb_operator.sh

# MongoDB Operator - Bash Implementation
# Provides MongoDB operations using mongo CLI

set -euo pipefail

# Global configuration
declare -g MONGODB_HOST="${MONGODB_HOST:-localhost}"
declare -g MONGODB_PORT="${MONGODB_PORT:-27017}"
declare -g MONGODB_DATABASE="${MONGODB_DATABASE:-tusklang}"
declare -g MONGODB_TIMEOUT="${MONGODB_TIMEOUT:-30}"

# MongoDB Operator Implementation
mongodb_operator() {
    local params="$1"
    local operation
    local collection
    local document
    local query
    
    # Parse parameters (simplified JSON parsing)
    operation=$(echo "$params" | jq -r '.operation // empty')
    collection=$(echo "$params" | jq -r '.collection // empty')
    document=$(echo "$params" | jq -r '.document // empty')
    query=$(echo "$params" | jq -r '.query // empty')
    
    # Validate required parameters
    if [[ -z "$operation" ]]; then
        log_error "Missing required parameter: operation"
        return 1
    fi
    
    if [[ -z "$collection" ]]; then
        log_error "Missing required parameter: collection"
        return 1
    fi
    
    # Execute operation
    case "$operation" in
        "find")
            mongodb_find "$collection" "$query"
            ;;
        "insertOne")
            mongodb_insert_one "$collection" "$document"
            ;;
        "updateOne")
            mongodb_update_one "$collection" "$query" "$document"
            ;;
        "deleteOne")
            mongodb_delete_one "$collection" "$query"
            ;;
        *)
            log_error "Unknown MongoDB operation: $operation"
            return 1
            ;;
    esac
}

# MongoDB find operation
mongodb_find() {
    local collection="$1"
    local query="$2"
    
    local mongo_query="db.${collection}.find(${query:-{}})"
    
    execute_mongo_command "$mongo_query"
}

# MongoDB insert operation
mongodb_insert_one() {
    local collection="$1"
    local document="$2"
    
    if [[ -z "$document" ]]; then
        log_error "Document is required for insertOne operation"
        return 1
    fi
    
    local mongo_query="db.${collection}.insertOne(${document})"
    
    execute_mongo_command "$mongo_query"
}

# Execute MongoDB command with timeout
execute_mongo_command() {
    local command="$1"
    local connection_string="mongodb://${MONGODB_HOST}:${MONGODB_PORT}/${MONGODB_DATABASE}"
    
    timeout "$MONGODB_TIMEOUT" mongo "$connection_string" --eval "$command" 2>/dev/null || {
        log_error "MongoDB command failed or timed out"
        return 1
    }
}

# Logging function
log_error() {
    echo "ERROR: $1" >&2
}

log_info() {
    echo "INFO: $1" >&2
}

# Export operator function
export -f mongodb_operator
```

### Error Handling Pattern
```bash
#!/bin/bash
# File: lib/error_handling.sh

# Error handling utilities for TuskLang operators

set -euo pipefail

# Global error handling
trap 'handle_error $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "%s " "${FUNCNAME[@]}")' ERR

# Error handler function
handle_error() {
    local exit_code="$1"
    local line_number="$2"
    local bash_line_number="$3"
    local command="$4"
    shift 4
    local function_stack=("$@")
    
    echo "ERROR: Command '$command' failed with exit code $exit_code" >&2
    echo "  Line: $line_number" >&2
    echo "  Function stack: ${function_stack[*]}" >&2
    
    # Log to operator audit log
    log_operator_error "$exit_code" "$line_number" "$command" "${function_stack[*]}"
    
    exit "$exit_code"
}

# Operator error logging
log_operator_error() {
    local exit_code="$1"
    local line_number="$2"
    local command="$3"
    local function_stack="$4"
    
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local log_entry=$(cat <<EOF
{
    "timestamp": "$timestamp",
    "level": "ERROR",
    "exit_code": $exit_code,
    "line": $line_number,
    "command": "$command",
    "function_stack": "$function_stack",
    "operator": "${TUSKLANG_CURRENT_OPERATOR:-unknown}"
}
EOF
)
    
    echo "$log_entry" >> "${TUSKLANG_LOG_FILE:-/var/log/tusklang/operators.log}"
}

# Validation helpers
validate_required_param() {
    local param_name="$1"
    local param_value="$2"
    
    if [[ -z "$param_value" ]]; then
        log_error "Missing required parameter: $param_name"
        return 1
    fi
}

validate_json() {
    local json_string="$1"
    
    if ! echo "$json_string" | jq empty 2>/dev/null; then
        log_error "Invalid JSON format"
        return 1
    fi
}

# Timeout wrapper
execute_with_timeout() {
    local timeout_seconds="$1"
    local command="$2"
    shift 2
    
    timeout "$timeout_seconds" bash -c "$command" "$@" || {
        local exit_code=$?
        if [[ $exit_code -eq 124 ]]; then
            log_error "Command timed out after $timeout_seconds seconds"
        else
            log_error "Command failed with exit code $exit_code"
        fi
        return $exit_code
    }
}
```

### Configuration Management
```bash
#!/bin/bash
# File: lib/config.sh

# Configuration management for TuskLang operators

set -euo pipefail

# Default configuration
declare -A TUSKLANG_CONFIG=(
    ["log_level"]="INFO"
    ["log_file"]="/var/log/tusklang/operators.log"
    ["timeout"]="30"
    ["max_retries"]="3"
    ["retry_delay"]="1"
)

# Load configuration from environment variables
load_config() {
    # MongoDB configuration
    TUSKLANG_CONFIG["mongodb_host"]="${MONGODB_HOST:-localhost}"
    TUSKLANG_CONFIG["mongodb_port"]="${MONGODB_PORT:-27017}"
    TUSKLANG_CONFIG["mongodb_database"]="${MONGODB_DATABASE:-tusklang}"
    
    # Redis configuration
    TUSKLANG_CONFIG["redis_host"]="${REDIS_HOST:-localhost}"
    TUSKLANG_CONFIG["redis_port"]="${REDIS_PORT:-6379}"
    TUSKLANG_CONFIG["redis_password"]="${REDIS_PASSWORD:-}"
    
    # Kafka configuration
    TUSKLANG_CONFIG["kafka_brokers"]="${KAFKA_BROKERS:-localhost:9092}"
    TUSKLANG_CONFIG["kafka_client_id"]="${KAFKA_CLIENT_ID:-tusklang-client}"
    
    # Kubernetes configuration
    TUSKLANG_CONFIG["kubeconfig"]="${KUBECONFIG:-~/.kube/config}"
    TUSKLANG_CONFIG["kubectl_timeout"]="${KUBECTL_TIMEOUT:-60}"
    
    # Docker configuration
    TUSKLANG_CONFIG["docker_host"]="${DOCKER_HOST:-unix:///var/run/docker.sock}"
    
    # AWS configuration
    TUSKLANG_CONFIG["aws_region"]="${AWS_REGION:-us-east-1}"
    TUSKLANG_CONFIG["aws_profile"]="${AWS_PROFILE:-default}"
}

# Get configuration value
get_config() {
    local key="$1"
    local default_value="${2:-}"
    
    echo "${TUSKLANG_CONFIG[$key]:-$default_value}"
}

# Set configuration value
set_config() {
    local key="$1"
    local value="$2"
    
    TUSKLANG_CONFIG["$key"]="$value"
}

# Load configuration on source
load_config
```

### Async Execution with Background Jobs
```bash
#!/bin/bash
# File: lib/async.sh

# Async execution utilities for TuskLang operators

set -euo pipefail

declare -A ASYNC_JOBS=()

# Execute function in background
async_execute() {
    local job_id="$1"
    local function_name="$2"
    shift 2
    local args=("$@")
    
    # Create temporary files for job output
    local stdout_file=$(mktemp)
    local stderr_file=$(mktemp)
    local exit_code_file=$(mktemp)
    
    # Execute function in background
    {
        "$function_name" "${args[@]}" > "$stdout_file" 2> "$stderr_file"
        echo $? > "$exit_code_file"
    } &
    
    local pid=$!
    
    # Store job information
    ASYNC_JOBS["$job_id"]="$pid:$stdout_file:$stderr_file:$exit_code_file"
    
    echo "$job_id"
}

# Wait for async job completion
async_wait() {
    local job_id="$1"
    local timeout="${2:-30}"
    
    if [[ -z "${ASYNC_JOBS[$job_id]:-}" ]]; then
        log_error "Job not found: $job_id"
        return 1
    fi
    
    local job_info="${ASYNC_JOBS[$job_id]}"
    local pid="${job_info%%:*}"
    local remaining="${job_info#*:}"
    local stdout_file="${remaining%%:*}"
    local remaining="${remaining#*:}"
    local stderr_file="${remaining%%:*}"
    local exit_code_file="${remaining#*:}"
    
    # Wait for job with timeout
    local elapsed=0
    while [[ $elapsed -lt $timeout ]]; do
        if ! kill -0 "$pid" 2>/dev/null; then
            # Job completed
            local exit_code
            exit_code=$(cat "$exit_code_file")
            
            # Return result
            cat "$stdout_file"
            if [[ -s "$stderr_file" ]]; then
                cat "$stderr_file" >&2
            fi
            
            # Cleanup
            rm -f "$stdout_file" "$stderr_file" "$exit_code_file"
            unset ASYNC_JOBS["$job_id"]
            
            return "$exit_code"
        fi
        
        sleep 1
        ((elapsed++))
    done
    
    # Timeout - kill job
    kill -TERM "$pid" 2>/dev/null || true
    sleep 2
    kill -KILL "$pid" 2>/dev/null || true
    
    # Cleanup
    rm -f "$stdout_file" "$stderr_file" "$exit_code_file"
    unset ASYNC_JOBS["$job_id"]
    
    log_error "Job timed out: $job_id"
    return 124
}

# Get async job status
async_status() {
    local job_id="$1"
    
    if [[ -z "${ASYNC_JOBS[$job_id]:-}" ]]; then
        echo "NOT_FOUND"
        return 1
    fi
    
    local job_info="${ASYNC_JOBS[$job_id]}"
    local pid="${job_info%%:*}"
    
    if kill -0 "$pid" 2>/dev/null; then
        echo "RUNNING"
    else
        echo "COMPLETED"
    fi
}
```

## TESTING REQUIREMENTS

### Unit Tests with BATS
```bash
#!/usr/bin/env bats
# File: tests/operators/mongodb_operator.bats

# MongoDB Operator Tests

setup() {
    load '../test_helper'
    source '../../operators/mongodb_operator.sh'
}

@test "mongodb_operator: successful insertOne operation" {
    # Mock mongo command
    function mongo() {
        echo '{ "acknowledged": true, "insertedId": "507f1f77bcf86cd799439011" }'
    }
    export -f mongo
    
    local params='{"operation": "insertOne", "collection": "users", "document": {"name": "John"}}'
    
    run mongodb_operator "$params"
    
    [ "$status" -eq 0 ]
    [[ "$output" == *"acknowledged"* ]]
    [[ "$output" == *"insertedId"* ]]
}

@test "mongodb_operator: missing operation parameter" {
    local params='{"collection": "users", "document": {"name": "John"}}'
    
    run mongodb_operator "$params"
    
    [ "$status" -eq 1 ]
    [[ "$output" == *"Missing required parameter: operation"* ]]
}

@test "mongodb_operator: missing collection parameter" {
    local params='{"operation": "insertOne", "document": {"name": "John"}}'
    
    run mongodb_operator "$params"
    
    [ "$status" -eq 1 ]
    [[ "$output" == *"Missing required parameter: collection"* ]]
}

@test "mongodb_operator: unknown operation" {
    local params='{"operation": "unknown", "collection": "users"}'
    
    run mongodb_operator "$params"
    
    [ "$status" -eq 1 ]
    [[ "$output" == *"Unknown MongoDB operation: unknown"* ]]
}

@test "mongodb_operator: find operation with query" {
    # Mock mongo command
    function mongo() {
        echo '[{"_id": "507f1f77bcf86cd799439011", "name": "John"}]'
    }
    export -f mongo
    
    local params='{"operation": "find", "collection": "users", "query": {"name": "John"}}'
    
    run mongodb_operator "$params"
    
    [ "$status" -eq 0 ]
    [[ "$output" == *"John"* ]]
}
```

### Integration Tests
```bash
#!/usr/bin/env bats
# File: tests/integration/mongodb_integration.bats

# MongoDB Integration Tests

setup() {
    load '../test_helper'
    source '../../operators/mongodb_operator.sh'
    
    # Start MongoDB container for testing
    docker run -d --name test-mongo -p 27017:27017 mongo:5.0 >/dev/null 2>&1 || true
    sleep 5
}

teardown() {
    # Stop and remove MongoDB container
    docker stop test-mongo >/dev/null 2>&1 || true
    docker rm test-mongo >/dev/null 2>&1 || true
}

@test "mongodb_integration: insert and find document" {
    # Insert document
    local insert_params='{"operation": "insertOne", "collection": "test_users", "document": {"name": "Integration Test", "email": "test@example.com"}}'
    
    run mongodb_operator "$insert_params"
    
    [ "$status" -eq 0 ]
    [[ "$output" == *"acknowledged"* ]]
    
    # Find document
    local find_params='{"operation": "find", "collection": "test_users", "query": {"name": "Integration Test"}}'
    
    run mongodb_operator "$find_params"
    
    [ "$status" -eq 0 ]
    [[ "$output" == *"Integration Test"* ]]
    [[ "$output" == *"test@example.com"* ]]
}
```

## PERFORMANCE REQUIREMENTS

### Connection Pooling with File Descriptors
```bash
#!/bin/bash
# File: lib/connection_pool.sh

# Connection pooling for TuskLang operators

set -euo pipefail

declare -A CONNECTION_POOL=()
declare -A CONNECTION_USAGE=()

# Create connection pool
create_connection_pool() {
    local pool_name="$1"
    local max_connections="${2:-10}"
    
    CONNECTION_POOL["$pool_name"]="$max_connections"
    CONNECTION_USAGE["$pool_name"]=0
}

# Get connection from pool
get_connection() {
    local pool_name="$1"
    local connection_command="$2"
    
    local max_connections="${CONNECTION_POOL[$pool_name]:-10}"
    local current_usage="${CONNECTION_USAGE[$pool_name]:-0}"
    
    if [[ $current_usage -ge $max_connections ]]; then
        log_error "Connection pool exhausted: $pool_name"
        return 1
    fi
    
    # Increment usage
    CONNECTION_USAGE["$pool_name"]=$((current_usage + 1))
    
    # Execute connection command
    eval "$connection_command"
}

# Return connection to pool
return_connection() {
    local pool_name="$1"
    
    local current_usage="${CONNECTION_USAGE[$pool_name]:-0}"
    if [[ $current_usage -gt 0 ]]; then
        CONNECTION_USAGE["$pool_name"]=$((current_usage - 1))
    fi
}

# Connection wrapper
with_connection() {
    local pool_name="$1"
    local connection_command="$2"
    local operation_command="$3"
    
    get_connection "$pool_name" "$connection_command"
    local connection_result=$?
    
    if [[ $connection_result -eq 0 ]]; then
        eval "$operation_command"
        local operation_result=$?
        return_connection "$pool_name"
        return $operation_result
    else
        return $connection_result
    fi
}
```

### Caching with File System
```bash
#!/bin/bash
# File: lib/cache.sh

# Caching utilities for TuskLang operators

set -euo pipefail

declare -g CACHE_DIR="${TUSKLANG_CACHE_DIR:-/tmp/tusklang-cache}"
declare -g CACHE_TTL="${TUSKLANG_CACHE_TTL:-3600}"

# Initialize cache directory
init_cache() {
    mkdir -p "$CACHE_DIR"
    chmod 700 "$CACHE_DIR"
}

# Generate cache key
cache_key() {
    local input="$1"
    echo -n "$input" | sha256sum | cut -d' ' -f1
}

# Check if cache entry exists and is valid
cache_exists() {
    local key="$1"
    local cache_file="$CACHE_DIR/$key"
    
    if [[ -f "$cache_file" ]]; then
        local file_age=$(($(date +%s) - $(stat -c %Y "$cache_file")))
        if [[ $file_age -lt $CACHE_TTL ]]; then
            return 0
        else
            rm -f "$cache_file"
        fi
    fi
    
    return 1
}

# Get value from cache
cache_get() {
    local key="$1"
    local cache_file="$CACHE_DIR/$key"
    
    if cache_exists "$key"; then
        cat "$cache_file"
        return 0
    fi
    
    return 1
}

# Set value in cache
cache_set() {
    local key="$1"
    local value="$2"
    local cache_file="$CACHE_DIR/$key"
    
    echo "$value" > "$cache_file"
    chmod 600 "$cache_file"
}

# Clear cache
cache_clear() {
    rm -rf "$CACHE_DIR"/*
}

# Cache wrapper for operations
with_cache() {
    local cache_key="$1"
    local operation_command="$2"
    
    if cache_exists "$cache_key"; then
        cache_get "$cache_key"
        return 0
    fi
    
    local result
    result=$(eval "$operation_command")
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        cache_set "$cache_key" "$result"
        echo "$result"
    fi
    
    return $exit_code
}

# Initialize cache on source
init_cache
```

## COMPLETION CHECKLIST

### Security Operators (5 missing)
- [ ] @jwt - JWT handling with jose CLI or custom
- [ ] @oauth - OAuth flows with curl
- [ ] @saml - SAML authentication
- [ ] @ldap - LDAP authentication with ldapsearch
- [ ] @vault - HashiCorp Vault with vault CLI

### Control Flow Operators (5 missing)
- [ ] @switch - Bash case statements
- [ ] @for - Bash for loops
- [ ] @while - Bash while loops
- [ ] @each - Array iteration
- [ ] @filter - Array filtering with grep/awk

### Database Operators (5 missing)
- [ ] @mongodb - MongoDB with mongo CLI
- [ ] @redis - Redis with redis-cli
- [ ] @postgresql - PostgreSQL with psql
- [ ] @mysql - MySQL with mysql CLI
- [ ] @influxdb - InfluxDB with influx CLI

### Communication Operators (5 missing)
- [ ] @email - Email with sendmail/mail
- [ ] @sms - SMS with curl APIs
- [ ] @slack - Slack with curl API
- [ ] @teams - Microsoft Teams with curl API
- [ ] @discord - Discord with curl API

### Cloud Operators (12 missing)
- [ ] @kubernetes - K8s with kubectl
- [ ] @docker - Docker with docker CLI
- [ ] @aws - AWS with aws CLI
- [ ] @azure - Azure with az CLI
- [ ] @gcp - GCP with gcloud CLI
- [ ] @terraform - Infrastructure with terraform CLI
- [ ] @ansible - Automation with ansible commands
- [ ] @puppet - Configuration with puppet CLI
- [ ] @chef - Configuration with chef CLI
- [ ] @jenkins - CI/CD with jenkins CLI
- [ ] @github - GitHub with gh CLI
- [ ] @gitlab - GitLab with glab CLI

### Enterprise Operators (6 missing)
- [ ] @rbac - Role-based access with system users/groups
- [ ] @audit - Audit logging with auditd
- [ ] @compliance - Compliance checks
- [ ] @governance - Data governance policies
- [ ] @policy - Policy engine with rules
- [ ] @workflow - Workflow management

## BASH-SPECIFIC ADVANTAGES
- Native system integration and process management
- Direct access to system commands and utilities
- Excellent for DevOps and infrastructure automation
- Great for cloud CLI tools (aws, gcloud, az, kubectl)
- Built-in text processing with grep, awk, sed
- Lightweight and universally available
- Perfect for CI/CD pipeline integration
- Native container and Docker operations

## FINAL VALIDATION

Before claiming completion, verify:
- [ ] All 85 operators are implemented
- [ ] All operators use proper error handling with set -euo pipefail
- [ ] Comprehensive test coverage with BATS (>90%)
- [ ] Performance benchmarks met
- [ ] Security best practices followed
- [ ] Documentation complete with examples
- [ ] Integration tests pass

## ESTIMATED TIMELINE: 19-28 weeks

**Remember**: You currently have 19/85 operators. You need 66 more operators to achieve true 100% completion. Focus on system and DevOps operators first, leveraging Bash's native system integration capabilities.

**DO NOT claim completion until ALL 85 operators are implemented and tested.**