#!/usr/bin/env ruby
require 'matrix';require 'json';require 'digest'
class MedicalDiagnostics;def initialize;@symptom_db={};@disease_patterns={};@diagnostic_rules=[];load_medical_knowledge;end;def add_symptom(patient_id,symptom,severity,duration);@symptom_db[patient_id]||=[];@symptom_db[patient_id]<<{symptom:symptom,severity:severity,duration:duration,timestamp:Time.now};end;def differential_diagnosis(patient_id);symptoms=@symptom_db[patient_id]||[];return [] if symptoms.empty?;possible_diseases=[];@disease_patterns.each{|disease,pattern|match_score=calculate_match_score(symptoms,pattern);possible_diseases<<{disease:disease,probability:match_score,confidence:match_score>0.7 ? 'high' : match_score>0.4 ? 'medium' : 'low'} if match_score>0.2};possible_diseases.sort_by{|d|-d[:probability]};end;def bayesian_inference(symptoms,prior_probabilities);posterior_probs={};prior_probabilities.each{|disease,prior|likelihood=calculate_likelihood(symptoms,disease);evidence=calculate_evidence(symptoms);posterior_probs[disease]=(likelihood*prior)/evidence};posterior_probs;end;def clinical_decision_support(patient_data,symptoms);diagnosis=differential_diagnosis(patient_data[:id]);risk_factors=assess_risk_factors(patient_data);recommendations=[];diagnosis.each{|d|if d[:probability]>0.6;recommendations<<{type:'diagnostic_test',test:get_confirmatory_test(d[:disease]),priority:'high'};recommendations<<{type:'treatment',treatment:get_treatment_protocol(d[:disease]),priority:'medium'};end};{diagnosis:diagnosis,risk_assessment:risk_factors,recommendations:recommendations};end;private;def load_medical_knowledge;@disease_patterns['influenza']=[{symptom:'fever',weight:0.8},{symptom:'cough',weight:0.6},{symptom:'fatigue',weight:0.7},{symptom:'body_aches',weight:0.5}];@disease_patterns['pneumonia']=[{symptom:'fever',weight:0.9},{symptom:'cough',weight:0.8},{symptom:'chest_pain',weight:0.7},{symptom:'shortness_of_breath',weight:0.8}];@disease_patterns['migraine']=[{symptom:'headache',weight:0.9},{symptom:'nausea',weight:0.6},{symptom:'light_sensitivity',weight:0.7}];@disease_patterns['diabetes']=[{symptom:'excessive_thirst',weight:0.8},{symptom:'frequent_urination',weight:0.8},{symptom:'fatigue',weight:0.6},{symptom:'blurred_vision',weight:0.5}];end;def calculate_match_score(patient_symptoms,disease_pattern);total_weight=0;matched_weight=0;disease_pattern.each{|pattern_symptom|total_weight+=pattern_symptom[:weight];patient_symptom=patient_symptoms.find{|ps|ps[:symptom]==pattern_symptom[:symptom]};if patient_symptom;severity_factor=patient_symptom[:severity]/10.0;matched_weight+=pattern_symptom[:weight]*severity_factor;end};total_weight>0 ? matched_weight/total_weight : 0;end;def calculate_likelihood(symptoms,disease);pattern=@disease_patterns[disease]||[];return 0 if pattern.empty?;likelihood=1.0;pattern.each{|p|symptom_present=symptoms.any?{|s|s[:symptom]==p[:symptom]};likelihood*=symptom_present ? 0.8 : 0.2};likelihood;end;def calculate_evidence(symptoms);evidence=0.0;@disease_patterns.each{|disease,pattern|evidence+=calculate_likelihood(symptoms,disease)*0.1};[evidence,0.001].max;end;def assess_risk_factors(patient_data);risk_score=0;risk_score+=20 if patient_data[:age]>65;risk_score+=15 if patient_data[:smoking];risk_score+=10 if patient_data[:diabetes];risk_score+=10 if patient_data[:hypertension];risk_score+=5 if patient_data[:family_history];{score:risk_score,level:risk_score>40 ? 'high' : risk_score>20 ? 'medium' : 'low'};end;def get_confirmatory_test(disease);tests={'influenza'=>'rapid_flu_test','pneumonia'=>'chest_xray','migraine'=>'mri_scan','diabetes'=>'glucose_tolerance_test'};tests[disease]||'general_blood_work';end;def get_treatment_protocol(disease);treatments={'influenza'=>'antiviral_medication','pneumonia'=>'antibiotics','migraine'=>'triptans','diabetes'=>'metformin'};treatments[disease]||'supportive_care';end;end
class DrugDiscovery;def initialize;@molecular_db={};@drug_targets={};@compound_library=[];@interaction_matrix={};end;def add_compound(id,smiles,properties);@compound_library<<{id:id,smiles:smiles,properties:properties,binding_affinity:{},toxicity_score:rand*0.5};end;def molecular_docking(compound_id,target_protein);compound=@compound_library.find{|c|c[:id]==compound_id};return nil unless compound;binding_energy=calculate_binding_energy(compound,target_protein);binding_affinity=Math.exp(-binding_energy/0.6);compound[:binding_affinity][target_protein]=binding_affinity;{compound_id:compound_id,target:target_protein,binding_energy:binding_energy,affinity:binding_affinity,docking_score:binding_affinity*100};end;def qsar_analysis(compounds,activity_data);features=extract_molecular_features(compounds);model=build_qsar_model(features,activity_data);predictions={};compounds.each{|compound|features=extract_molecular_features([compound]);predicted_activity=predict_activity(model,features[0]);predictions[compound[:id]]=predicted_activity};{model:model,predictions:predictions,r_squared:calculate_r_squared(activity_data.values,predictions.values)};end;def drug_repurposing(existing_drugs,new_targets);repurposing_candidates=[];existing_drugs.each{|drug|new_targets.each{|target|docking_result=molecular_docking(drug[:id],target);if docking_result&&docking_result[:affinity]>0.7;repurposing_candidates<<{drug:drug[:id],original_indication:drug[:indication],new_target:target,affinity:docking_result[:affinity],repurposing_score:docking_result[:affinity]*0.8};end}};repurposing_candidates.sort_by{|c|-c[:repurposing_score]};end;def admet_prediction(compound_id);compound=@compound_library.find{|c|c[:id]==compound_id};return nil unless compound;absorption=calculate_absorption(compound);distribution=calculate_distribution(compound);metabolism=calculate_metabolism(compound);excretion=calculate_excretion(compound);toxicity=compound[:toxicity_score];{compound_id:compound_id,absorption:absorption,distribution:distribution,metabolism:metabolism,excretion:excretion,toxicity:toxicity,drug_likeness:calculate_drug_likeness(absorption,distribution,metabolism,excretion,toxicity)};end;private;def calculate_binding_energy(compound,target);base_energy=-5.0;molecular_weight=compound[:properties][:molecular_weight]||300;logp=compound[:properties][:logp]||2.5;energy_adjustment=(molecular_weight-300)*0.01+(logp-2.5)*0.5;base_energy+energy_adjustment+rand*2-1;end;def extract_molecular_features(compounds);compounds.map{|c|{molecular_weight:c[:properties][:molecular_weight]||300,logp:c[:properties][:logp]||2.5,hbd:c[:properties][:hbd]||2,hba:c[:properties][:hba]||4,rotatable_bonds:c[:properties][:rotatable_bonds]||5}};end;def build_qsar_model(features,activities);coefficients={molecular_weight:0.001,logp:0.3,hbd:-0.2,hba:0.1,rotatable_bonds:-0.1};{type:'linear_regression',coefficients:coefficients,intercept:5.0};end;def predict_activity(model,features);activity=model[:intercept];model[:coefficients].each{|feature,coeff|activity+=features[feature]*coeff};[activity,0].max;end;def calculate_r_squared(actual,predicted);return 0 if actual.empty?;mean_actual=actual.sum.to_f/actual.length;ss_tot=actual.sum{|a|(a-mean_actual)**2};ss_res=actual.zip(predicted).sum{|a,p|(a-p)**2};1-(ss_res/ss_tot);end;def calculate_absorption(compound);mw=compound[:properties][:molecular_weight]||300;logp=compound[:properties][:logp]||2.5;absorption=100-(mw-300)*0.1-(logp-2.5)*5;[absorption,0].max;end;def calculate_distribution(compound);logp=compound[:properties][:logp]||2.5;distribution=50+logp*10;[[distribution,100].min,0].max;end;def calculate_metabolism(compound);metabolism=70+rand*20;end;def calculate_excretion(compound);mw=compound[:properties][:molecular_weight]||300;excretion=80-(mw-300)*0.05;[excretion,0].max;end;def calculate_drug_likeness(absorption,distribution,metabolism,excretion,toxicity);score=(absorption*0.3+distribution*0.2+metabolism*0.2+excretion*0.2+(100-toxicity*100)*0.1)/100;[score,1.0].min;end;end
class MedicalImaging;def initialize;@image_filters={};@segmentation_models={};@classification_models={};end;def preprocess_image(image_data,modality);case modality;when 'xray';enhance_contrast(image_data);when 'mri';normalize_intensity(image_data);when 'ct';apply_windowing(image_data);when 'ultrasound';reduce_speckle_noise(image_data);else;image_data;end;end;def segment_organs(image_data,organ_type);preprocessed=preprocess_image(image_data,organ_type);case organ_type;when 'liver';liver_segmentation(preprocessed);when 'lung';lung_segmentation(preprocessed);when 'brain';brain_segmentation(preprocessed);when 'heart';heart_segmentation(preprocessed);else;generic_segmentation(preprocessed);end;end;def detect_abnormalities(image_data,modality);preprocessed=preprocess_image(image_data,modality);features=extract_image_features(preprocessed);abnormalities=[];if modality=='xray';abnormalities<<{type:'pneumonia',confidence:0.85,location:[100,150]} if features[:lung_opacity]>0.7;abnormalities<<{type:'fracture',confidence:0.92,location:[200,300]} if features[:bone_discontinuity]>0.8;elsif modality=='mri';abnormalities<<{type:'tumor',confidence:0.78,location:[150,200]} if features[:mass_effect]>0.6;abnormalities<<{type:'lesion',confidence:0.65,location:[80,120]} if features[:signal_abnormality]>0.5;end;abnormalities;end;def radiomics_analysis(image_data,roi_mask);texture_features=calculate_texture_features(image_data,roi_mask);shape_features=calculate_shape_features(roi_mask);intensity_features=calculate_intensity_features(image_data,roi_mask);{texture:texture_features,shape:shape_features,intensity:intensity_features,radiomics_signature:generate_signature(texture_features,shape_features,intensity_features)};end;def ai_assisted_diagnosis(image_data,clinical_data,modality);image_features=extract_image_features(image_data);abnormalities=detect_abnormalities(image_data,modality);risk_score=calculate_imaging_risk_score(image_features,clinical_data);diagnosis_suggestions=[];abnormalities.each{|abnorm|if abnorm[:confidence]>0.8;diagnosis_suggestions<<{condition:abnorm[:type],confidence:abnorm[:confidence],supporting_evidence:["imaging_findings","clinical_correlation"]};end};{abnormalities:abnormalities,risk_score:risk_score,diagnosis_suggestions:diagnosis_suggestions,recommended_followup:risk_score>0.7 ? 'urgent_referral' : risk_score>0.4 ? 'routine_followup' : 'normal_surveillance'};end;private;def enhance_contrast(image);image.map{|pixel|[[(pixel*1.2).to_i,255].min,0].max};end;def normalize_intensity(image);max_val=image.flatten.max;min_val=image.flatten.min;range=max_val-min_val;return image if range==0;image.map{|row|row.map{|pixel|((pixel-min_val)*255/range).to_i}};end;def apply_windowing(image);window_level=40;window_width=400;min_val=window_level-window_width/2;max_val=window_level+window_width/2;image.map{|row|row.map{|pixel|pixel<min_val ? 0 : pixel>max_val ? 255 : ((pixel-min_val)*255/(max_val-min_val)).to_i}};end;def reduce_speckle_noise(image);image.map.with_index{|row,i|row.map.with_index{|pixel,j|neighbors=[];(-1..1).each{|di|(-1..1).each{|dj|ni,nj=i+di,j+dj;neighbors<<image[ni][nj] if ni>=0&&ni<image.length&&nj>=0&&nj<row.length}};neighbors.sum/neighbors.length}};end;def liver_segmentation(image);threshold=120;image.map{|row|row.map{|pixel|pixel>threshold ? 255 : 0}};end;def lung_segmentation(image);threshold=50;image.map{|row|row.map{|pixel|pixel<threshold ? 255 : 0}};end;def brain_segmentation(image);threshold=100;image.map{|row|row.map{|pixel|pixel>threshold ? 255 : 0}};end;def heart_segmentation(image);threshold=80;image.map{|row|row.map{|pixel|pixel>threshold ? 255 : 0}};end;def generic_segmentation(image);threshold=128;image.map{|row|row.map{|pixel|pixel>threshold ? 255 : 0}};end;def extract_image_features(image);mean_intensity=image.flatten.sum.to_f/image.flatten.length;std_intensity=Math.sqrt(image.flatten.sum{|p|(p-mean_intensity)**2}/image.flatten.length);edge_density=calculate_edge_density(image);{mean_intensity:mean_intensity,std_intensity:std_intensity,edge_density:edge_density,lung_opacity:mean_intensity/255.0,bone_discontinuity:edge_density,mass_effect:std_intensity/100.0,signal_abnormality:edge_density*0.5};end;def calculate_edge_density(image);edges=0;total=0;(1...image.length-1).each{|i|(1...image[0].length-1).each{|j|gx=(image[i-1][j-1]-image[i-1][j+1]+2*(image[i][j-1]-image[i][j+1])+image[i+1][j-1]-image[i+1][j+1]).abs;gy=(image[i-1][j-1]-image[i+1][j-1]+2*(image[i-1][j]-image[i+1][j])+image[i-1][j+1]-image[i+1][j+1]).abs;edges+=1 if Math.sqrt(gx**2+gy**2)>50;total+=1}};total>0 ? edges.to_f/total : 0;end;def calculate_texture_features(image,mask);{contrast:calculate_contrast(image,mask),homogeneity:calculate_homogeneity(image,mask),entropy:calculate_entropy(image,mask)};end;def calculate_shape_features(mask);area=mask.flatten.count{|p|p>0};perimeter=calculate_perimeter(mask);{area:area,perimeter:perimeter,compactness:area>0 ? perimeter**2/(4*Math::PI*area) : 0};end;def calculate_intensity_features(image,mask);masked_pixels=[];image.each_with_index{|row,i|row.each_with_index{|pixel,j|masked_pixels<<pixel if mask[i]&&mask[i][j]>0}};return {} if masked_pixels.empty?;mean=masked_pixels.sum.to_f/masked_pixels.length;{mean:mean,std:Math.sqrt(masked_pixels.sum{|p|(p-mean)**2}/masked_pixels.length),min:masked_pixels.min,max:masked_pixels.max};end;def calculate_contrast(image,mask);0.5;end;def calculate_homogeneity(image,mask);0.8;end;def calculate_entropy(image,mask);2.5;end;def calculate_perimeter(mask);perimeter=0;mask.each_with_index{|row,i|row.each_with_index{|pixel,j|if pixel>0;neighbors=0;[[-1,0],[1,0],[0,-1],[0,1]].each{|di,dj|ni,nj=i+di,j+dj;neighbors+=1 if ni>=0&&ni<mask.length&&nj>=0&&nj<row.length&&mask[ni][nj]>0};perimeter+=1 if neighbors<4;end}};perimeter;end;def generate_signature(texture,shape,intensity);Digest::MD5.hexdigest("#{texture}#{shape}#{intensity}")[0..15];end;def calculate_imaging_risk_score(features,clinical_data);score=0;score+=0.3 if features[:lung_opacity]>0.6;score+=0.4 if features[:mass_effect]>0.5;score+=0.2 if clinical_data[:age]>60;score+=0.1 if clinical_data[:smoking_history];[score,1.0].min;end;end
class HealthcareFramework;attr_reader :diagnostics,:drug_discovery,:medical_imaging;def initialize;@diagnostics=MedicalDiagnostics.new;@drug_discovery=DrugDiscovery.new;@medical_imaging=MedicalImaging.new;setup_medical_data;end;def setup_medical_data;@drug_discovery.add_compound('COMP001','CCO',{molecular_weight:46,logp:-0.31,hbd:1,hba:1});@drug_discovery.add_compound('COMP002','CC(=O)OC1=CC=CC=C1C(=O)O',{molecular_weight:180,logp:1.19,hbd:1,hba:4});end;def comprehensive_patient_analysis(patient_data,symptoms,image_data=nil);diagnostic_result=@diagnostics.clinical_decision_support(patient_data,symptoms);imaging_result=nil;if image_data;imaging_result=@medical_imaging.ai_assisted_diagnosis(image_data,patient_data,'xray');end;treatment_options=generate_treatment_plan(diagnostic_result,imaging_result);{patient_id:patient_data[:id],diagnosis:diagnostic_result,imaging:imaging_result,treatment_plan:treatment_options,overall_risk:calculate_overall_risk(diagnostic_result,imaging_result),follow_up_required:requires_followup?(diagnostic_result,imaging_result)};end;def drug_development_pipeline(target_protein,indication);compounds=@drug_discovery.instance_variable_get(:@compound_library);screening_results=[];compounds.each{|compound|docking_result=@drug_discovery.molecular_docking(compound[:id],target_protein);if docking_result&&docking_result[:affinity]>0.5;admet=@drug_discovery.admet_prediction(compound[:id]);screening_results<<{compound_id:compound[:id],binding_affinity:docking_result[:affinity],drug_likeness:admet[:drug_likeness],development_priority:docking_result[:affinity]*admet[:drug_likeness]};end};screening_results.sort_by{|r|-r[:development_priority]};end;def personalized_medicine_recommendation(patient_genetics,condition,available_drugs);recommendations=[];available_drugs.each{|drug|efficacy_score=calculate_genetic_efficacy(patient_genetics,drug);safety_score=calculate_genetic_safety(patient_genetics,drug);recommendations<<{drug:drug[:name],efficacy_prediction:efficacy_score,safety_prediction:safety_score,personalization_score:efficacy_score*safety_score,dosage_adjustment:calculate_dosage_adjustment(patient_genetics,drug)}};recommendations.sort_by{|r|-r[:personalization_score]};end;private;def generate_treatment_plan(diagnostic_result,imaging_result);treatments=[];diagnostic_result[:diagnosis].each{|d|if d[:probability]>0.6;treatments<<{type:'medication',drug:get_treatment_protocol(d[:disease]),duration:'7-10 days',monitoring:'weekly'};end};if imaging_result&&imaging_result[:risk_score]>0.7;treatments<<{type:'procedure',procedure:'biopsy',urgency:'high',specialist_referral:true};end;treatments;end;def calculate_overall_risk(diagnostic_result,imaging_result);diagnostic_risk=diagnostic_result[:risk_assessment][:score]/100.0;imaging_risk=imaging_result ? imaging_result[:risk_score] : 0;combined_risk=[diagnostic_risk,imaging_risk].max;{score:combined_risk,level:combined_risk>0.7 ? 'high' : combined_risk>0.4 ? 'medium' : 'low'};end;def requires_followup?(diagnostic_result,imaging_result);return true if diagnostic_result[:risk_assessment][:level]=='high';return true if imaging_result&&imaging_result[:risk_score]>0.6;diagnostic_result[:diagnosis].any?{|d|d[:probability]>0.8};end;def calculate_genetic_efficacy(genetics,drug);base_efficacy=0.7;genetics.each{|gene,variant|case gene;when 'CYP2D6';base_efficacy*=variant=='normal' ? 1.0 : 0.5;when 'ABCB1';base_efficacy*=variant=='wildtype' ? 1.0 : 0.8;end};base_efficacy;end;def calculate_genetic_safety(genetics,drug);base_safety=0.9;genetics.each{|gene,variant|case gene;when 'HLA-B';base_safety*=variant=='*5701' ? 0.3 : 1.0;when 'TPMT';base_safety*=variant=='poor' ? 0.4 : 1.0;end};base_safety;end;def calculate_dosage_adjustment(genetics,drug);adjustment=1.0;genetics.each{|gene,variant|case gene;when 'CYP2C19';adjustment*=variant=='poor' ? 0.5 : variant=='ultrarapid' ? 1.5 : 1.0;end};adjustment;end;def get_treatment_protocol(disease);{'influenza'=>'oseltamivir','pneumonia'=>'amoxicillin','migraine'=>'sumatriptan','diabetes'=>'metformin'}[disease]||'supportive_care';end;end
puts "G24 HEALTHCARE DONE!" if __FILE__==$0 