#!/usr/bin/env ruby
require 'json';require 'socket';require 'thread'
class IoTDeviceManager;def initialize;@devices={};@networks={};@protocols={};end;def register_device(id,type,capabilities);@devices[id]={id:id,type:type,capabilities:capabilities,status:'online',last_seen:Time.now,data:{}};end;def send_command(device_id,command,params={});device=@devices[device_id];return {error:"Device not found"} unless device;{device_id:device_id,command:command,params:params,timestamp:Time.now,status:'sent'};end;def collect_sensor_data(device_id,sensor_type,value);@devices[device_id][:data][sensor_type]=value if @devices[device_id];end;def get_device_status(device_id);@devices[device_id]&.slice(:status,:last_seen,:data);end;def discover_devices(network='local');discovered=[];(1..10).each{|i|discovered<<{id:"device_#{i}",type:['sensor','actuator','gateway'].sample,ip:"192.168.1.#{i+100}"}};discovered;end;end
class EdgeComputing;def initialize;@edge_nodes={};@distributed_tasks={};@data_cache={};end;def register_edge_node(id,location,capabilities);@edge_nodes[id]={id:id,location:location,capabilities:capabilities,load:0,status:'active'};end;def distribute_task(task_id,code,data);best_node=@edge_nodes.values.min_by{|n|n[:load]};return {error:"No available nodes"} unless best_node;best_node[:load]+=1;@distributed_tasks[task_id]={node:best_node[:id],code:code,data:data,status:'running',started_at:Time.now};{task_id:task_id,assigned_to:best_node[:id],status:'distributed'};end;def process_at_edge(node_id,data);node=@edge_nodes[node_id];return {error:"Node not found"} unless node;processed_data=data.map{|d|d.is_a?(Numeric) ? d*2 : d.upcase};@data_cache[node_id]=processed_data;{node_id:node_id,processed:processed_data.length,cached:true};end;def sync_with_cloud(node_id);cached_data=@data_cache[node_id]||[];{node_id:node_id,synced_records:cached_data.length,timestamp:Time.now};end;end
class IndustrialAutomation;def initialize;@machines={};@production_lines={};@quality_control={};@maintenance={};end;def register_machine(id,type,specifications);@machines[id]={id:id,type:type,specs:specifications,status:'idle',production_count:0,last_maintenance:Time.now};end;def start_production(line_id,product_type,quantity);@production_lines[line_id]={product:product_type,target_quantity:quantity,current_count:0,status:'running',started_at:Time.now};end;def quality_check(product_id,parameters);score=parameters.values.sum/parameters.length.to_f;status=score>80 ? 'pass' : 'fail';@quality_control[product_id]={score:score,status:status,timestamp:Time.now};{product_id:product_id,quality_score:score,status:status};end;def predictive_maintenance(machine_id);machine=@machines[machine_id];return {error:"Machine not found"} unless machine;hours_since_maintenance=(Time.now-machine[:last_maintenance])/3600;risk_score=hours_since_maintenance/100.0;maintenance_needed=risk_score>0.8;@maintenance[machine_id]={risk_score:risk_score,maintenance_needed:maintenance_needed,next_maintenance:Time.now+86400*7};{machine_id:machine_id,risk_score:risk_score,maintenance_needed:maintenance_needed};end;def get_production_stats(line_id);line=@production_lines[line_id];return {} unless line;efficiency=(line[:current_count].to_f/line[:target_quantity]*100).round(2);{line_id:line_id,efficiency:efficiency,status:line[:status],current_count:line[:current_count]};end;end
class IoTFramework;attr_reader :device_manager,:edge_computing,:industrial;def initialize;@device_manager=IoTDeviceManager.new;@edge_computing=EdgeComputing.new;@industrial=IndustrialAutomation.new;end;def smart_factory_setup;@device_manager.register_device('temp_sensor_1','temperature_sensor',['temperature','humidity']);@device_manager.register_device('robot_arm_1','actuator',['pick','place','rotate']);@edge_computing.register_edge_node('edge_1','factory_floor',['data_processing','real_time_control']);@industrial.register_machine('cnc_1','cnc_machine',{max_speed:1000,precision:0.01});end;def process_sensor_data(device_id,sensor_type,value);@device_manager.collect_sensor_data(device_id,sensor_type,value);@edge_computing.process_at_edge('edge_1',[value]);end;def automated_quality_control(product_id,measurements);result=@industrial.quality_check(product_id,measurements);if result[:status]=='fail';@device_manager.send_command('robot_arm_1','reject_product',{product_id:product_id});end;result;end;end
puts "G19 DONE!" if __FILE__==$0 