#!/usr/bin/env ruby
require 'json';require 'net/http';require 'time'
class MultiCloudManager;def initialize;@providers={aws:{},gcp:{},azure:{}};@deployments={};@load_balancers={};end;def register_provider(name,config);@providers[name.to_sym]=config.merge({status:'connected',resources:{}});end;def deploy_to_cloud(app_name,provider,config);deployment_id="#{app_name}_#{provider}_#{Time.now.to_i}";@deployments[deployment_id]={app:app_name,provider:provider,config:config,status:'deployed',created_at:Time.now};@providers[provider.to_sym][:resources][app_name]=deployment_id;{deployment_id:deployment_id,status:'success',endpoint:"https://#{app_name}.#{provider}.example.com"};end;def multi_cloud_deploy(app_name,providers=['aws','gcp','azure']);results={};providers.each{|p|result=deploy_to_cloud(app_name,p,{instances:2,region:'us-east-1'});results[p]=result};setup_load_balancer(app_name,results);end;def setup_load_balancer(app_name,deployments);@load_balancers[app_name]={endpoints:deployments.values.map{|d|d[:endpoint]},strategy:'round_robin',health_checks:true};end;def get_deployment_status(deployment_id);@deployments[deployment_id]&.slice(:status,:created_at,:provider);end;end
class ServerlessFramework;def initialize;@functions={};@triggers={};@executions={};end;def deploy_function(name,code,runtime='ruby3.2');function_id="func_#{name}_#{Time.now.to_i}";@functions[function_id]={name:name,code:code,runtime:runtime,status:'deployed',invocations:0};{function_id:function_id,status:'deployed',endpoint:"https://api.gateway.com/#{function_id}"};end;def add_trigger(function_id,trigger_type,config);@triggers[function_id]||=[];@triggers[function_id]<<{type:trigger_type,config:config,created_at:Time.now};end;def invoke_function(function_id,payload={});func=@functions[function_id];return {error:"Function not found"} unless func;execution_id="exec_#{Time.now.to_i}";@executions[execution_id]={function_id:function_id,payload:payload,started_at:Time.now,duration:rand(100..500),status:'completed'};func[:invocations]+=1;{execution_id:execution_id,result:"Function #{func[:name]} executed successfully",duration:@executions[execution_id][:duration]};end;def event_driven_execution(event_type,data);triggered_functions=@triggers.select{|fid,triggers|triggers.any?{|t|t[:type]==event_type}}.keys;results={};triggered_functions.each{|fid|results[fid]=invoke_function(fid,{event:event_type,data:data})};results;end;end
class CloudMonitoring;def initialize;@metrics={};@alerts={};@logs={};@dashboards={};end;def collect_metrics(service,metric_name,value,timestamp=Time.now);@metrics[service]||={};@metrics[service][metric_name]||=[];@metrics[service][metric_name]<<{value:value,timestamp:timestamp};check_alerts(service,metric_name,value);end;def create_alert(name,service,metric,threshold,condition='greater_than');@alerts[name]={service:service,metric:metric,threshold:threshold,condition:condition,triggered:false};end;def check_alerts(service,metric,value);@alerts.each{|name,alert|next unless alert[:service]==service && alert[:metric]==metric;triggered=case alert[:condition];when 'greater_than';value>alert[:threshold];when 'less_than';value<alert[:threshold];else false;end;if triggered && !alert[:triggered];alert[:triggered]=true;log_event(service,"ALERT: #{name} triggered - #{metric}=#{value}");end};end;def log_event(service,message,level='info');@logs[service]||=[];@logs[service]<<{message:message,level:level,timestamp:Time.now};end;def create_dashboard(name,widgets);@dashboards[name]={widgets:widgets,created_at:Time.now};end;def get_service_health(service);metrics=@metrics[service]||{};recent_logs=(@logs[service]||[]).last(10);alerts=@alerts.select{|_,a|a[:service]==service && a[:triggered]};{service:service,metrics_count:metrics.keys.length,recent_alerts:alerts.length,log_entries:recent_logs.length,status:alerts.empty? ? 'healthy' : 'degraded'};end;end
class CloudNativeFramework;attr_reader :multi_cloud,:serverless,:monitoring;def initialize;@multi_cloud=MultiCloudManager.new;@serverless=ServerlessFramework.new;@monitoring=CloudMonitoring.new;end;def deploy_cloud_native_app(app_name);multi_cloud_result=@multi_cloud.multi_cloud_deploy(app_name);func_result=@serverless.deploy_function("#{app_name}_handler","def handler(event);'Hello from #{app_name}';end");@serverless.add_trigger(func_result[:function_id],'http',{path:"/#{app_name}"});@monitoring.create_alert("#{app_name}_cpu",'app','cpu_usage',80);@monitoring.create_dashboard("#{app_name}_dashboard",[{type:'metrics',service:'app'},{type:'logs',service:'app'}]);{multi_cloud:multi_cloud_result,serverless:func_result,monitoring_setup:true};end;def auto_scale_response(service,cpu_usage);@monitoring.collect_metrics(service,'cpu_usage',cpu_usage);if cpu_usage>80;scale_result=@multi_cloud.deploy_to_cloud("#{service}_scale",'aws',{instances:1});@monitoring.log_event(service,"Auto-scaled up: #{scale_result[:deployment_id]}");elsif cpu_usage<20;@monitoring.log_event(service,"Scale down recommended");end;end;def observability_report;services=@monitoring.instance_variable_get(:@metrics).keys;services.map{|s|@monitoring.get_service_health(s)};end;end
puts "G20 DONE!" if __FILE__==$0 