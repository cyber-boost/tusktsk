name: Build and Test Go SDK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/go-sdk

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22, 1.23]
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('sdk/go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: cd sdk/go && go mod download

    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        working-directory: sdk/go
        args: --timeout=5m

    - name: Run tests
      run: |
        cd sdk/go
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        go tool cover -html=coverage.txt -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: sdk/go/coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.platform }}
        path: sdk/go/coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, darwin/amd64, darwin/arm64, windows/amd64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('sdk/go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      run: |
        cd sdk/go
        GOOS=$(echo ${{ matrix.platform }} | cut -d'/' -f1) \
        GOARCH=$(echo ${{ matrix.platform }} | cut -d'/' -f2) \
        CGO_ENABLED=0 go build -a -installsuffix cgo -o tusktsk-${{ matrix.platform }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tusktsk-${{ matrix.platform }}
        path: sdk/go/tusktsk-${{ matrix.platform }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'sdk/go'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Go security check
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: cd sdk/go && gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'gosec-results.sarif' 