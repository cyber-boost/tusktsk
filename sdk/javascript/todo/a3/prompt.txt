üö® AGENT A3: CLOUD INFRASTRUCTURE OPERATORS SPECIALIST üö®
üéØ MISSION: COMPLETE 6 CRITICAL CLOUD INTEGRATION COMPONENTS FOR TUSKLANG JAVASCRIPT SDK

‚ö†Ô∏è ABSOLUTE RULES - VIOLATION = IMMEDIATE PUNISHMENT:
1. ZERO PLACEHOLDER CODE - Every line must be production-ready, functional JavaScript code
2. ZERO "TODO" COMMENTS - Complete implementations only
3. ZERO MOCK/STUB IMPLEMENTATIONS - Real cloud SDK integrations, real functionality
4. VELOCITY MODE ONLY - Maximum speed, zero hesitation, immediate execution

üî• JAVASCRIPT PRODUCTION REQUIREMENTS:
‚úÖ Real cloud provider SDK connections with proper authentication and security
‚úÖ Comprehensive error handling with specific error types and retry logic
‚úÖ Async safety with proper connection pooling and concurrency control
‚úÖ Resource management with proper cleanup and optimization
‚úÖ Circuit breakers for fault tolerance and recovery
‚úÖ Structured logging with metrics collection and observability
‚úÖ Configuration validation with secure defaults
‚úÖ Memory leak prevention and proper resource cleanup
‚úÖ Performance benchmarks meeting <500ms response time for standard operations
‚úÖ Security best practices with IAM roles, service accounts, and credential management

üìä SUCCESS METRICS PER COMPONENT:
- Lines of Code: 480-650 lines of production-ready JavaScript
- Performance: <500ms response time for standard operations
- Memory: <256MB per component under sustained load
- Security: All connections encrypted, credentials properly managed
- Reliability: 99.9% uptime, automatic failover and recovery
- Integration: Real cloud service integration with comprehensive examples

üéØ YOUR 6 CRITICAL CLOUD INFRASTRUCTURE GOALS:

**G1: AWS OPERATOR - Real Amazon Web Services Integration**
- Complete `executeAwsOperator()` with AWS SDK v3
- Multi-service support: EC2, S3, RDS, Lambda, CloudWatch, IAM
- Credential chain support (IAM roles, profiles, environment variables)
- Region-aware operations with automatic failover
- Cost optimization with resource tagging and monitoring
- CloudFormation and CDK integration capabilities

**G2: AZURE OPERATOR - Real Microsoft Azure Integration**
- Complete `executeAzureOperator()` with Azure SDK for JavaScript
- Multi-service support: VM, Storage, SQL, Functions, Monitor, AD
- Service principal and managed identity authentication
- Resource group and subscription management
- ARM template deployment capabilities
- Azure DevOps integration for CI/CD pipelines

**G3: GCP OPERATOR - Real Google Cloud Platform Integration**
- Complete `executeGcpOperator()` with Google Cloud client libraries
- Multi-service support: Compute, Storage, BigQuery, Functions, Monitoring
- Service account key and ADC authentication
- Project and billing account management
- Deployment Manager and Cloud Build integration
- Stackdriver logging and monitoring integration

**G4: KUBERNETES OPERATOR - Real Container Orchestration**
- Complete `executeKubernetesOperator()` with official k8s client
- Cluster management with RBAC and networking
- Deployment, Service, ConfigMap, Secret resource management
- Helm chart deployment and package management
- Custom Resource Definition (CRD) support
- Real-time pod monitoring and log streaming

**G5: DOCKER OPERATOR - Real Container Management**
- Complete `executeDockerOperator()` with Docker Engine API
- Image building with multi-stage and layer optimization
- Container lifecycle management (create, start, stop, remove)
- Volume and network management capabilities
- Docker Compose orchestration support
- Registry integration (Docker Hub, ECR, ACR, GCR)

**G6: TERRAFORM OPERATOR - Real Infrastructure as Code**
- Complete `executeTerraformOperator()` with Terraform execution
- Plan, apply, destroy operations with state management
- Multi-cloud provider support (AWS, Azure, GCP)
- Variable and output management with validation
- Remote state backend configuration
- Drift detection and compliance monitoring

üöÄ ARCHITECTURE PATTERNS TO FOLLOW:
- Follow existing patterns in `tsk-enhanced.js`
- Use console.log with contextual information and structured data
- Implement proper async/await with timeout handling
- Add comprehensive metrics collection points
- Use environment variables with validation and secure defaults
- Implement graceful shutdown and resource cleanup

‚ö° CLOUD-SPECIFIC REQUIREMENTS:
- All cloud operations must use official SDK libraries
- All operations must have timeout protection (60s max)
- All API calls must include proper authentication headers
- All connections must support TLS encryption
- All components must handle rate limiting gracefully
- All operations must include comprehensive audit logging

üèÜ END GOAL: 6/6 CLOUD INFRASTRUCTURE COMPONENTS COMPLETE
Directory: `todo/a3/`
Status: Ready for enterprise production deployments
Quality: Production-hardened, security-compliant, performance-optimized

REMEMBER: You are building TuskLang's cloud-native foundation for enterprise scalability. Excellence is not optional. 