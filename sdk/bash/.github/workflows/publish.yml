# TuskLang SDK - Package Publishing Workflow
# =========================================
# Publishes generated language SDKs to GitHub Packages
# Version: 1.0.0

name: Publish Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      language:
        description: 'Language to publish (all, python, nodejs, go, rust, dotnet, php)'
        required: true
        default: 'all'
      version:
        description: 'Version to publish'
        required: true
        default: '1.0.0'

env:
  TUSKLANG_HOME: /opt/tusklang
  DOCKER_BUILDKIT: 1

jobs:
  # Publish Python SDK to GitHub Packages
  publish-python:
    name: Publish Python SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'python'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Python SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && pypi_create_package 'tusklang-python' '${{ github.event.inputs.version || '1.0.0' }}'"

      - name: Build Python package
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && python3 setup.py sdist bdist_wheel"

      - name: Publish to GitHub Packages
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && \
            python3 -m twine upload --repository-url https://upload.pypi.org/legacy/ \
            --username __token__ --password $GITHUB_TOKEN dist/*"

  # Publish Node.js SDK to GitHub Packages
  publish-nodejs:
    name: Publish Node.js SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'nodejs'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@tusklang'

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Node.js SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/platform-integrations.sh && nodejs_create_package 'tusklang-nodejs'"

      - name: Update package.json version
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && \
            npm version ${{ github.event.inputs.version || '1.0.0' }} --no-git-tag-version"

      - name: Publish to GitHub Packages
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e NODE_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && \
            npm publish --access public"

  # Publish Go SDK to GitHub Packages
  publish-go:
    name: Publish Go SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'go'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Go SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/kubernetes-integration.sh && create_go_operator 'tusklang-go'"

      - name: Update go.mod version
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && \
            go mod edit -module github.com/tusklang/go-sdk@v${{ github.event.inputs.version || '1.0.0' }}"

      - name: Build Go SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && go build -o bin/tusklang-go ./cmd/main.go"

      - name: Create Go release
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && \
            gh release create v${{ github.event.inputs.version || '1.0.0' }} bin/tusklang-go --repo tusklang/go-sdk"

  # Publish Rust SDK to GitHub Packages
  publish-rust:
    name: Publish Rust SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'rust'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Rust SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && crates_create_package 'tusklang-rust' '${{ github.event.inputs.version || '1.0.0' }}'"

      - name: Update Cargo.toml version
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && \
            sed -i 's/version = \".*\"/version = \"${{ github.event.inputs.version || '1.0.0' }}\"/' Cargo.toml"

      - name: Publish to crates.io
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e CARGO_REGISTRY_TOKEN=${{ secrets.CARGO_REGISTRY_TOKEN }} \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && cargo publish"

  # Publish .NET SDK to GitHub Packages
  publish-dotnet:
    name: Publish .NET SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'dotnet'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate .NET SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && nuget_create_package 'tusklang-dotnet' '${{ github.event.inputs.version || '1.0.0' }}'"

      - name: Build .NET package
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/nuget/tusklang-dotnet && dotnet pack -c Release"

      - name: Publish to GitHub Packages
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e NUGET_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/nuget/tusklang-dotnet && \
            dotnet nuget push bin/Release/*.nupkg --api-key $NUGET_TOKEN --source https://nuget.pkg.github.com/tusklang/index.json"

  # Publish PHP SDK to GitHub Packages
  publish-php:
    name: Publish PHP SDK
    runs-on: ubuntu-latest
    if: github.event.inputs.language == 'all' || github.event.inputs.language == 'php'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate PHP SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && composer_create_package 'tusklang-php' '${{ github.event.inputs.version || '1.0.0' }}'"

      - name: Build PHP package
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/composer/tusklang-php && composer install --no-dev --optimize-autoloader"

      - name: Publish to GitHub Packages
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro \
            -e COMPOSER_AUTH='{\"github-oauth\": {\"github.com\": \"${{ secrets.GITHUB_TOKEN }}\"}}' \
            tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/composer/tusklang-php && \
            composer config repositories.github composer https://github.com/tusklang/php-sdk && \
            composer publish"

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-python, publish-nodejs, publish-go, publish-rust, publish-dotnet, publish-php]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version || '1.0.0' }}
          release_name: TuskLang SDK v${{ github.event.inputs.version || '1.0.0' }}
          body: |
            ## TuskLang SDK v${{ github.event.inputs.version || '1.0.0' }}
            
            ### What's New
            - Multi-language SDK generation
            - Docker containerization
            - GitHub Packages integration
            - Comprehensive testing suite
            
            ### Supported Languages
            - Python SDK
            - Node.js SDK
            - Go SDK
            - Rust SDK
            - .NET SDK
            - PHP SDK
            
            ### Installation
            ```bash
            # Python
            pip install tusklang-python
            
            # Node.js
            npm install @tusklang/nodejs-sdk
            
            # Go
            go get github.com/tusklang/go-sdk
            
            # Rust
            cargo add tusklang-rust
            
            # .NET
            dotnet add package tusklang-dotnet
            
            # PHP
            composer require tusklang/php-sdk
            ```
          draft: false
          prerelease: false

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "TuskLang SDK v${{ github.event.inputs.version || '1.0.0' }} has been published to GitHub Packages"
          echo "Languages published: ${{ github.event.inputs.language || 'all' }}" 