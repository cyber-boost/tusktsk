# TuskLang SDK - Build and Test Workflow
# =====================================
# Builds and tests all language implementations generated by the Bash SDK
# Version: 1.0.0

name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      language:
        description: 'Specific language to build (optional)'
        required: false
        default: 'all'

env:
  TUSKLANG_HOME: /opt/tusklang
  DOCKER_BUILDKIT: 1

jobs:
  # Build and test Bash SDK
  bash-sdk:
    name: Bash SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Test Bash SDK
        run: |
          docker run --rm tusklang-sdk:latest tsk --version
          docker run --rm tusklang-sdk:latest tsk-enhanced --help
          docker run --rm tusklang-sdk:latest license --help

      - name: Run Bash SDK tests
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && tsk test"

  # Generate and test Python SDK
  python-sdk:
    name: Python SDK
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Python SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && pypi_create_package 'tusklang-python' '1.0.0'"

      - name: Test Python SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && python3 -m pytest tests/ -v"

      - name: Build Python package
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && python3 setup.py sdist bdist_wheel"

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-sdk-package
          path: /tmp/tusklang/packages/pypi/tusklang-python/dist/

  # Generate and test Node.js SDK
  nodejs-sdk:
    name: Node.js SDK
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Node.js SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/platform-integrations.sh && nodejs_create_package 'tusklang-nodejs'"

      - name: Test Node.js SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && npm test"

      - name: Build Node.js package
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && npm run build"

      - name: Upload Node.js artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nodejs-sdk-package
          path: /tmp/tusklang/builds/nodejs/tusklang-nodejs/

  # Generate and test Go SDK
  go-sdk:
    name: Go SDK
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Go SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/kubernetes-integration.sh && create_go_operator 'tusklang-go'"

      - name: Test Go SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && go test ./..."

      - name: Build Go SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && go build -o bin/tusklang-go ./cmd/main.go"

      - name: Upload Go artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-sdk-package
          path: /tmp/tusklang/platforms/kubernetes/tusklang-go/

  # Generate and test Rust SDK
  rust-sdk:
    name: Rust SDK
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate Rust SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && source sdk/platforms/package-management.sh && crates_create_package 'tusklang-rust' '1.0.0'"

      - name: Test Rust SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && cargo test"

      - name: Build Rust SDK
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && cargo build --release"

      - name: Upload Rust artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-sdk-package
          path: /tmp/tusklang/packages/crates/tusklang-rust/target/release/

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [bash-sdk, python-sdk, nodejs-sdk, go-sdk, rust-sdk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Start services
        run: |
          docker-compose up -d mysql postgres redis mongodb

      - name: Wait for services
        run: |
          docker-compose exec -T mysql mysqladmin ping -h localhost --wait
          docker-compose exec -T postgres pg_isready -U tusklang_user -d tusklang_sdk
          docker-compose exec -T redis redis-cli ping
          docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')"

      - name: Run integration tests
        run: |
          docker run --rm --network tusklang-network \
            -e MYSQL_HOST=mysql -e POSTGRES_HOST=postgres \
            -e REDIS_HOST=redis -e MONGODB_HOST=mongodb \
            -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && tsk integration-test"

      - name: Stop services
        if: always()
        run: docker-compose down

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tusklang-sdk:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security scan (Python)
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && bandit -r src/ -f json -o bandit-report.json"

      - name: Run npm audit (Node.js)
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && npm audit --audit-level=moderate"

      - name: Run cargo audit (Rust)
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && cargo audit"

  # Code quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace:ro koalaman/shellcheck:stable \
            --shell=bash --severity=style sdk/**/*.sh *.sh

      - name: Run Python linting
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/pypi/tusklang-python && flake8 src/ tests/"

      - name: Run Node.js linting
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/builds/nodejs/tusklang-nodejs && npm run lint"

      - name: Run Go linting
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/platforms/kubernetes/tusklang-go && golangci-lint run"

      - name: Run Rust linting
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /tmp/tusklang/packages/crates/tusklang-rust && cargo clippy -- -D warnings"

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Run performance benchmarks
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && tsk benchmark"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: /tmp/tusklang/benchmarks/

  # Documentation generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: bash-sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.bash -t tusklang-sdk:latest .

      - name: Generate API documentation
        run: |
          docker run --rm -v ${{ github.workspace }}/sdk:/opt/tusklang/sdk:ro tusklang-sdk:latest \
            bash -c "cd /opt/tusklang && tsk docs"

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: /tmp/tusklang/docs/ 